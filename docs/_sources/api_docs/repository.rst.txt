.. warning:: This application is private and can only be used by Users
  within the CloudCIX company

The Repository Application is a software system that manages CloudCIX Software Projects

Projects in the Repository are grouped by the owning Member

**Basic Usage**: ``cloudcix.api.Repository.<service>.<method>``

Services
--------

Application
^^^^^^^^^^^
Every Member can have their own set of Applications

An Application contains one or more Services

This service allows the User to manage Applications

**Basic Usage**: ``cloudcix.api.Repository.application.<method>``

Available Methods
    - ``cloudcix.api.Repository.application.list``
        - Allows the User to get a list of all Applications belonging to a given Member
    - ``cloudcix.api.Repository.application.create``
        - Allows the User to create new documentation for an Application for a given Member
    - ``cloudcix.api.Repository.application.read``
        - Allows the User to get all documentation for a given Application
    - ``cloudcix.api.Repository.application.update``
        - Allows the User to update the details of an Application's documentation
    - ``cloudcix.api.Repository.application.delete``
        - Allows the User to delete an Application

DTO
^^^
A DTO, or Data Transfer Object, can be used as both Request and Response objects

DTOs are used to build complex objects

This service allows the User to manage DTO instances

**Basic Usage**: ``cloudcix.api.Repository.dto.<method>``

Available Methods
    - ``cloudcix.api.Repository.dto.list``
        - Allows the User to get a list of all DTOs
    - ``cloudcix.api.Repository.dto.create``
        - Allows the User to create a new DTO
    - ``cloudcix.api.Repository.dto.read``
        - Allows the User to get the details of a DTO
    - ``cloudcix.api.Repository.dto.update``
        - Allows the User to update the details of a DTO
    - ``cloudcix.api.Repository.dto.delete``
        - Allows the User to delete a DTO

DTO Parameter
^^^^^^^^^^^^^
A DTO has one or more parameters

This service allows the User to manage parameters belonging to different DTOs

**Basic Usage**: ``cloudcix.api.Repository.dto_parameter.<method>``

Available Methods
    - ``cloudcix.api.Repository.dto_parameter.list``
        - Allows the User to get a list of DTO Parameters for a DTO
    - ``cloudcix.api.Repository.dto_parameter.create``
        - Allows the User to add a new Parameter to a DTO
    - ``cloudcix.api.Repository.dto_parameter.read``
        - Allows the User to get the details of a DTO Parameter
    - ``cloudcix.api.Repository.dto_parameter.update``
        - Allows the User to update the details of a DTO Parameter
    - ``cloudcix.api.Repository.dto_parameter.delete``
        - Allows the User to delete a DTO Parameter for a given DTO

Exception Code
^^^^^^^^^^^^^^
An Exception Code is a mapping of an error code to an error message

Error codes are returned by a Method when an error occurs, and this service provides a mapping of an error code to its message

This service allows the User to manage Exception Codes

**Basic Usage**: ``cloudcix.api.Repository.exception_code.<method>``

Available Methods
    - ``cloudcix.api.Repository.exception_code.list``
        - Allows the User to get a list of Exception Codes for a given Method
    - ``cloudcix.api.Repository.exception_code.create``
        - Allows the User to create a new Exception Code in a default language
        - ``idLanguage 1 == English``
    - ``cloudcix.api.Repository.exception_code.read``
        - Allows the User to read an Exception Code in a specified language, if it is defined
        - If the Exception Code is not defined in the specified language, the method will try to get the Code in the User's default language
        - If no Code exists for that language either, this method will return the English language version
    - ``cloudcix.api.Repository.exception_code.delete``
        - Allows the User to delete a given Exception Code

Language Exception Code
^^^^^^^^^^^^^^^^^^^^^^^
This service allows the User to manage translations for existing Exception Codes

**Basic Usage**: ``cloudcix.api.Repository.language_exception_code.<method>``

Available Methods
    - ``cloudcix.api.Repository.language_exception_code.list``
        - Allows the User to get a list of translations for the given Exception Code
    - ``cloudcix.api.Repository.language_exception_code.create``
        - Allows the User to add a new translation to an existing Exception Code
    - ``cloudcix.api.Repository.language_exception_code.read``
        - Allows the User to get the details of a translation of an Exception Code
    - ``cloudcix.api.Repository.language_exception_code.update``
        - Allows the User to update the details of a translation
    - ``cloudcix.api.Repository.language_exception_code.delete``
        - Allows the User to delete a translation
        - .. note:: The English translation of an Exception Code cannot be deleted.
                    Exception Codes are required to have an English translation as a default if a translation is not found for a User's language.
                    If you wish to delete all translations, use ``exception_code.delete`` instead.

Member
^^^^^^
Every Member can have their own set of Applications

Only one ``Repository.Application`` should exist for every ``membership.Member``

.. note:: The ``Repository.Member`` object is different from the ``membership.Member``, but they should represent the same Member.
          ``Repository.Member`` is a representation of a ``membership.Member`` for use within the ``Repository`` application to group Applications.

**Basic Usage**: ``cloudcix.api.Repository.member.<method>``

Available Methods
    - ``cloudcix.api.Repository.member.list``
        - Allows the User to return the list of Members that have entries in the ``Repository`` application
    - ``cloudcix.api.Repository.member.read``
        - Allows the User to get the details of a Member in the ``Repository`` application

Method
^^^^^^
Every Service has one or more methods

This methods are an HTTP verb mapped to CRUDL:

+--------------+----------------+
| CRUDL Method |  HTTP Verb(s)  |
+==============+================+
| *Create*     | *POST*         |
+--------------+----------------+
| *Read*       | *GET*          |
+--------------+----------------+
| *Update*     | *PUT / PATCH*  |
+--------------+----------------+
| *Delete*     | *DELETE*       |
+--------------+----------------+
| *List*       | *GET*          |
+--------------+----------------+

.. note:: - *Read* requires an id
          - *PUT* requires the full object is sent in the request, *PATCH* only requires the fields to be updated

**Basic Usage**: ``cloudcix.api.Repository.method.<method>``

Available Methods
    - ``cloudcix.api.Repository.method.list``
        - Allows the User to list all methods in a given Service
    - ``cloudcix.api.Repository.method.create``
        - Allows the User to create a new method under the given Service
    - ``cloudcix.api.Repository.method.read``
        - Allows the User to get the details of a given Method
    - ``cloudcix.api.Repository.method.update``
        - Allows the User to update the details of a given Method
    - ``cloudcix.api.Repository.method.delete``
        - Allows the User to delete a given Method

Method Parameter
^^^^^^^^^^^^^^^^
Every Method has a set of parameters which conform the Request and Response objects

This service allows the User to manage the Parameters for a Method

**Basic Usage**: ``cloudcix.api.Repository.method_parameter.<method>``

Available Methods
    - ``cloudcix.api.Repository.method_parameter.list``
        - Allows the User to get a list of Parameters for a given Method
    - ``cloudcix.api.Repository.method_parameter.create``
        - Allows the User to create a new Parameter for a given Method
    - ``cloudcix.api.Repository.method_parameter.read``
        - Allows the User to read the details of a given Parameter
    - ``cloudcix.api.Repository.method_parameter.update``
        - Allows the User to update the details of a given Parameter
    - ``cloudcix.api.Repository.method_parameter.delete``
        - Allows the User to delete a given Parameter

Service
^^^^^^^
An Application has one or more Services

A Service has an endpoint which is defined to tell other developers the path to consume it

This service allows the User to manage Service records

**Basic Usage**: ``cloudcix.api.Repository.service.<method>``

Available Methods
    - ``cloudcix.api.Repository.service.list``
        - Allows the User to get a list of Services in a given Application
    - ``cloudcix.api.Repository.service.create``
        - Allows the User to create a new Service under a given Application
    - ``cloudcix.api.Repository.service.read``
        - Allows the User to read the details of a given Service
    - ``cloudcix.api.Repository.service.update``
        - Allows the User to update the details of a given Service
    - ``cloudcix.api.Repository.service.delete``
        - Allows the User to delete the record of a given Service
