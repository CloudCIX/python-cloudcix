The Vault Application exposes a REST API capable of managing objects in MinIO and the ability to share. Vault is
available to addresses linked to a Vault Cloud Region where a MinIO instance has been set up.

**Basic Usage**: ``cloudcix.api.Vault.<service>.<method>``

Services
--------

Bucket
^^^^^^
This services allows for the management of Buckets in the MinIO object store.

For each method request the following paramaters must be sent:
- ``region_name``
    - This paramater is used to create the MinIO client for the region.
- ``path``
    - This paramater is used to specify the location of a Bucket in the region's MinIO.

**Basic Usage**: ``cloudcix.api.Vault.bucket.<method>``

Available Methods
    - ``cloudcix.api.Vault.bucket.head``
        - Allows the user to verify if a Bucket exists on the sent ``path`` in the Minio on the sent ``region_name.``
        - A 200 will be returned if the Bucket exists.
    - ``cloudcix.api.Vault.bucket.read``
        - Allows the user to retrieve a list of Objects in the Bucket on the sent ``path`` in the Minio on the sent
          ``region_name.``
    - ``cloudcix.api.Vault.bucket.create``
        - Allows the user to create a Bucket on the sent ``path`` in the Minio on the sent ``region_name.``
    - ``cloudcix.api.Vault.bucket.delete``
        - Allows the user to delete a Bucket on the sent ``path`` in the Minio on the sent ``region_name.``

.. note:: Based on how the URLs for are structured, it is required you pass ``region_name='name_of_region'`` and
          ``path='mybucket'`` to these methods

Object
^^^^^^
This services allows for the management of Objects in the MinIO object store.

For each method request the following paramaters must be sent:
- ``region_name``
    - This paramater is used to create the MinIO client for the region.
- ``path``
    - This paramater is used to specify the location of an Object in the region's MinIO.

Returned with the ``head`` and ``read`` method requests will be the following metadata in ``_headers``:
    - ``content_length``
        - The size of the Object.
    - ``content_type``
        - The Content-Type of the Object.
    - ``etag``
        -  The ETag of the Object.
    - ``last_modified``
        - The time in UTC of when the Object was last modified.

**Basic Usage**: ``cloudcix.api.Vault.object.<method>``

Available Methods
    - ``cloudcix.api.Vault.object.head``
        - Allows the user to verify if an Object exists on the sent ``path`` in the Minio on the sent ``region_name.``
        - A 200 will be returned if the Object exists.
        - Also returned in the response will be ``_headers`` where the metadata for each Object will be recorded
    - ``cloudcix.api.Vault.object.read``
        - Allows the user to retrive an Object from the sent ``path`` and in the Minio on the sent ``region_name.``
    - ``cloudcix.api.Vault.object.create``
        - Allows the user to upload (create or update) an Object into MinIO on the sent ``path`` and in the sent ``region_name.``
    - ``cloudcix.api.Vault.object.delete``
        - Allows the user to delete an Object from MinIO.

.. note:: Based on how the URLs for are structured, it is required you pass ``region_name='name_of_region'`` and
          ``path='mybucket'`` to these methods

Region
^^^^^^
This services allows for the management of Regions in the Vault Application.

A Region is a public cloud address that has a MinIO instance set up for
linked addresses to utilize.

**Basic Usage**: ``cloudcix.api.Vault.region.<method>``

Available Methods
    - ``cloudcix.api.Vault.region.list``
        - This method returns a list of Regions

Share
^^^^^^
This services allows for the management of Shares in the Vault Application.

A Share record holds the permission an address can have on a path in your MinIO bucket or to a specific object. A Share
allows an Address to access Objects owned by another Address. By default an address is granted read permissions.

**Basic Usage**: ``cloudcix.api.Vault.share.<method>``

Available Methods
    - ``cloudcix.api.Vault.share.list``
        - Allows the User to get a list of Shares associated with an Address.
        - Shares returned where the User's Address is the ``owner`` or the ``address_id``.
    - ``cloudcix.api.Vault.share.create``
        - Allows the User to create a new Share.
        - Share can be created to give an address read, upload(create and update) or delete permissions for a
          specified path.
    - ``cloudcix.api.Vault.share.read``
        - Allows the user to read the details of a Share record.
    - ``cloudcix.api.Vault.share.update``
        - Allows the user to update the details of a Share record.
        - Only a user from the ``owner`` address can execute this method
    - ``cloudcix.api.Vault.share.delete``
        - Allows the user to read the details of a Share record.
        - Only a user from the ``owner`` address can execute this method

Shared Bucket
^^^^^^^^^^^^^
This services allows for the management of Shared Buckets in the MinIO object store.

A user can read and delete a linked addresses MinIO's Bucket based on the Share record the owner of the MinIO
bucket has given them.

For each method request the following paramaters must be sent:
- ``region_name``
    - This paramater is used to create the MinIO client for the region.
- ``path``
    - This paramater is used to specify the location of a Shared Bucket in the region's MinIO.

**Basic Usage**: ``cloudcix.api.Vault.shared_bucket.<method>``

Available Methods
    - ``cloudcix.api.Vault.shared_bucket.head``
        - Allows the user to verify if a Shared Bucket exists on the sent ``path`` in the Minio on the sent ``region_name.``
        - A 200 will be returned if the Bucket exists.
    - ``cloudcix.api.Vault.shared_bucket.read``
        - This method will return a list of Objects in the Shared Bucket on the sent ``path`` in the Minio on the sent
          ``region_name.``
    - ``cloudcix.api.Vault.shared_bucket.delete``
        - Allows the user to delete the Shared Bucket on the sent ``path`` in the Minio on the sent ``region_name.``

.. note:: Based on how the URLs for are structured, it is required you pass ``region_name='name_of_region'`` and
          ``path='mybucket'`` to these methods

Shared Object
^^^^^^^^^^^^^
This services allows for the management of Shared Objects in the MinIO object store.

A user can read, upload or delete a linked addresses MinIO's Bucket based on the Share record the owner of the MinIO
Object has given them.

For each method request the following paramaters must be sent:
- ``region_name``
    - This paramater is used to create the MinIO client for the region.
- ``path``
    - This paramater is used to specify the location of a Shared Object in the region's MinIO.

Returned with the ``head`` and ``read`` method requests will be the following metadata in ``_headers``:
    - ``content_length``
        - The size of the Object.
    - ``content_type``
        - The Content-Type of the Object.
    - ``etag``
        -  The ETag of the Object.
    - ``last_modified``
        - The time in UTC of when the Object was last modified.

**Basic Usage**: ``cloudcix.api.Vault.shared_object.<method>``

Available Methods
    - ``cloudcix.api.Vault.shared_object.head``
        - Allows the user to verify if a Shared Object exists on the sent ``path`` in the Minio on the sent
          ``region_name.``
        - A 200 will be returned if the Object exists.
        - Also returned in the response will be ``_headers`` where the metadata for each Shared Object will be recorded
    - ``cloudcix.api.Vault.shared_object.read``
        - Allows the user to retrive a Shared Object from the sent ``path`` and in the Minio on the sent
          ``region_name.``
    - ``cloudcix.api.Vault.shared_object.create``
        - Allows the user to upload (create or update) a Shared Object into MinIO on the sent ``path`` and in the sent
          ``region_name.``
    - ``cloudcix.api.Vault.shared_object.delete``
        - Allows the user to delete the Shared Bucket on the sent ``path`` in the Minio on the sent ``region_name.``

.. note:: Based on how the URLs for are structured, it is required you pass ``region_name='name_of_region'`` and
          ``path='mybucket'`` to these methods
