SCM is an Application to manage the planning, procurement, storage,
distribution, service and return of inventory

**Basic Usage**: ``cloudcix.api.SCM.<service>.<method>``

Services
--------

Agreed Price
^^^^^^^^^^^^^
This service allows the User to manage the agreed prices for SKUs between
addresses they are linked to

**Basic Usage**: ``cloudcix.api.SCM.agreed_price.<method>``

Available Methods
    - ``cloudcix.api.SCM.agreed_price.list``
        - This method allows a User to get a list of Agreed Prices.
        - Users acting as Global can get any Agreed Price under any of 
          their Addresses.
        - Users acting as Local can only get Agreed Prices under their
          active Address
    - ``cloudcix.api.SCM.agreed_price.create``
        - This method allows the User to create a new Agreed Price between 
          its active Address and an address they are linked to for a SKU.
        - The Agreed Price must be unique for a SKU betwwen the two
          addresses
    - ``cloudcix.api.SCM.agreed_price.read``
        - This method allows a User to get the details of a specific
          Agreed Price for their active address
    - ``cloudcix.api.SCM.agreed_price.update``
        - This method allows the User to update the details of an Agreed
          Price
        - Only Agreed Prices under the User's active Address can be updated
        - The name must be unique per Address
    - ``cloudcix.api.SCM.agreed_price.delete``
        - This method allows the User to delete an Agreed Price
        - Only Agreed Prices under the User's active Address can be deleted.

Bin
^^^
This service allows the Users to manage their Bins. A Bin is a classification
for SKUs used to manage their inventory

**Basic Usage**: ``cloudcix.api.SCM.bin.<method>``

Available Methods
    - ``cloudcix.api.SCM.bin.list``
        - This method allows a User to get a list of Bins.
        - Users acting as Global can get any Bin under any of their
          Addresses.
        - Users acting as Local can only get Bins under their active
          Address
    - ``cloudcix.api.SCM.bin.create``
        - This method allows the User to create a new Bin for its
          active Address.
        - The name must be unique per Address
    - ``cloudcix.api.SCM.bin.read``
        - This method allows a User to get the details of a specific
          Bin
        - Users acting as Global can read any Bin under any of their
          Addresses
        - Users acting as Local can only read any Bin under their
          active Address
    - ``cloudcix.api.SCM.bin.update``
        - This method allows the User to update the details of a Bin
        - Only Bins under the User's active Address can be updated
        - The name must be unique per Address
    - ``cloudcix.api.SCM.bin.delete``
        - This method allows the User to delete a Bin
        - Only Bins under the User's active Address can be deleted.
        - Every SKU associated with this Bin will no longer be
          associated

Bin SKU
^^^^^^^
This service allows the User to associate their SKUs with their Bins

**Basic Usage**: ``cloudcix.api.SCM.bin_sku.<method>``

Available Methods
    - ``cloudcix.api.SCM.bin_sku.create``
        - This method allows the User to associate one or several SKUs
          with a Bin
    - ``cloudcix.api.SCM.bin_sku.delete``
        - This method allows the User to delete the associations
          between one or several SKUs with a Bin

Brand
^^^^^
A Brand is an optional classification for a SKU

**Basic Usage**: ``cloudcix.api.SCM.brand.<method>``

Available Methods
    - ``cloudcix.api.SCM.brand.list``
        - This method allows the User to get a list of Brand records
    - ``cloudcix.api.SCM.brand.create``
        - This method allows the User to create a new Brand for its
          Member
    - ``cloudcix.api.SCM.brand.read``
        - This method allows the User to read a Brand belonging to its
          Member
    - ``cloudcix.api.SCM.brand.update``
        - This method allows the User to update a Brand belonging to
          its Member
    - ``cloudcix.api.SCM.brand.delete``
        - This method allows the User to delete a Brand belonging to
          its Member
        - A Brand cannot be deleted it is has been used in an SKU

Critical BOM
^^^^^^^^^^^^
This service allows the User to manage an SKU's Bill of Materials (BOM)

A BOM is a list of the raw materials, sub-assemblies, intermediate assemblies,
sub-components, parts, and the quantities of each needed to manufacture an end
product

This service requires an idSKU for each method

**Basic Usage**: ``cloudcix.api.SCM.critical_bom.<method>``

Available Methods
    - ``cloudcix.api.SCM.critical_bom.list``
        - This method allows the User to get a list of associations
          between an SKU and sub-components.
        - Only owners or linked Members can list BOMs
    - ``cloudcix.api.SCM.critical_bom.create``
        - This method allows the User to create an association between
          an SKU and a sub-component
        - A sub-component can never be any parent or even the selected
          SKU.
        - Sub-components must be unique
    - ``cloudcix.api.SCM.critical_bom.read``
        - This method allows the User to read an association between an
          SKU and a sub-component
        - Only owners or linked Members can list BOMs
    - ``cloudcix.api.SCM.critical_bom.update``
        - This method allows the User to update an association between
          an SKU and a sub-component
        - A sub-component can never be any parent or even the selected
          SKU
        - Sub-components must be unique
        - Only owners of the SKUs can update the BOM
    - ``cloudcix.api.SCM.critical_bom.delete``
        - This method allows the User to delete an association between
          an SKU and sub-components.
        - Only owners can delete the BOM

Critical BOM (For Member)
^^^^^^^^^^^^^^^^^^^^^^^^^
This service provides a method to list all BOM records belonging to the Member
of the User making the request

**Basic Usage**: ``cloudcix.api.SCM.critical_bom_for_member.<method>``

Available Methods
    - ``cloudcix.api.SCM.critical_bom_for_member.list``
        - Returns a list of all BOM records belonging to the Member of
          the User making the request

Manufactured Item
^^^^^^^^^^^^^^^^^
This service allows the User to manage Manufactured Items

A Manufactured Item is an SKU with a serial number

**Basic Usage**: ``cloudcix.api.SCM.manufactured_item.<method>``

Available Methods
    - ``cloudcix.api.SCM.manufactured_item.list``
        - This method allows the User to get a list of Manufactured
          Items for the SKUs it owns.
    - ``cloudcix.api.SCM.manufactured_item.create``
        - This method allows the User to create a Manufactured Item.
        - If the SKU Type is set to No Identifier (0), the User can't
          create a Manufactured Item.
        - Only the owners of an SKU can create Manufactured Items.
    - ``cloudcix.api.SCM.manufactured_item.read``
        - This method allows the User to read details of a Manufactured
          Item
        - Only owners and linked Members can read a Manufactured Item
    - ``cloudcix.api.SCM.manufactured_item.update``
        - This method allows the User to create a Manufactured Item.
        - If the SKU Type is set to No Identifier (0), the User can't
          create a Manufactured Item.
        - Only the owners of an SKU can create Manufactured Items.
    - ``cloudcix.api.SCM.manufactured_item.delete``
        - This method allows a User to delete a Manufactured Item.
        - A Manufactured Item can only be deleted under the following conditions:
            - The User's Member is the owner of the associated SKU
            - The Manufactured Item hasn't been used in any transaction

Purchase Order
^^^^^^^^^^^^^^
This is a record of a request made to another Address for stock elements.

Purchase Orders can be used to maintain records of stock quantities of SKUs
that were ordered.

**Basic Usage**: ``cloudcix.api.SCM.purchase_order.<method>``

Available methods
    - ``cloudcix.api.SCM.purchase_order.list``
        - This method allows the User to get a list of Purchase Orders
          belonging to their acting Address
    - ``cloudcix.api.SCM.purchase_order.create``
        - This method allows the User to create a new Purchase Order for a
          specified Address
    - ``cloudcix.api.SCM.purchase_order.read``
        - This method allows the User to read the details and the lines of a
          specified Purchase Order
    - ``cloudcix.api.SCM.purchase_order.update``
        - This method allows the User to update the details and the lines of a
          specified Purchase Order

Return Question
^^^^^^^^^^^^^^^
Every SKU Category can have a set of questions defined by default and used for
certain transactions

This service allows the Users to handle these questions

**Basic Usage**: ``cloudcix.api.SCM.return_question.<method>``

Available Methods
    - ``cloudcix.api.SCM.return_question.list``
        - This method allows the User to get a list of Return Questions
    - ``cloudcix.api.SCM.return_question.create``
        - This method allows the User to create a Return Question
    - ``cloudcix.api.SCM.return_question.read``
        - This method returns a Return Question and its details
        - The Return Question must belong to the User's Member for it
          to be read
    - ``cloudcix.api.SCM.return_question.update``
        - This method allows the User to update a Return Question
    - ``cloudcix.api.SCM.return_question.delete``
        - This method allows the User to delete a Return Question

Return Question Field Type
^^^^^^^^^^^^^^^^^^^^^^^^^^
A Return Question supports several types for its answer

This service will have a list method to return all supported types

.. note:: The types are natural types supported by Python

**Basic Usage**: ``cloudcix.api.SCM.return_question_field_type.<method>``

Available Methods
    - ``cloudcix.api.SCM.return_question_field_type.list``
        - This method allows the User to get a list of the supported
          field types for the Return Question answers
          
Sales Order
^^^^^^^^^^^
A Sales Order is a record of an order of stock elements by a certain Address.

Sales Orders can be used to create Invoices, and maintain records of price and
quantities of SKUs that were ordered.

**Basic Usage**: ``cloudcix.api.SCM.sales_order.<method>``

Available Methods
    - ``cloudcix.api.SCM.sales_order.list``
        - This method allows the User to get a list of Sales Orders belonging to
          their acting Address
    - ``cloudcix.api.SCM.sales_order.create``
        - This method allows the User to create a new Sales Order for a
          specified address
    - ``cloudcix.api.SCM.sales_order.read``
        - This method allows the User to read the details of specified Sales
          Order
    - ``cloudcix.api.SCM.sales_order.update``
        - This method allows the User to update the details of the lines of a
          Sales Order

Service Group
^^^^^^^^^^^^^
Service Groups are used to put Model Numbers into groups with the same repair
complexity and therefore cost

Service Groups facilitate the simplification of contracts between Warrantors
and Service Centers by basing contracts on a small list of Service Groups
rather than the complete list of Model Numbers

**Basic Usage**: ``cloudcix.api.SCM.service_group.<method>``

Available Methods
    - ``cloudcix.api.SCM.service_group.list``
        - This method returns a list of Service Groups belonging to the
          Member of the User making the request
    - ``cloudcix.api.SCM.service_group.create``
        - This method allows the User to create a Service Group for
          their Member
    - ``cloudcix.api.SCM.service_group.read``
        - This method returns details of the selected Service Group for
          its Member
        - If the Service Group belongs to a different Member, a link
          between the current User's Address and one of the selected
          Member's Addresses must exist, with the required permissions
    - ``cloudcix.api.SCM.service_group.update``
        - This method allows the User to update a Service Group for
          their Member
    - ``cloudcix.api.SCM.service_group.delete``
        - This method allows the User to delete a Service Group for
          their Member
        - All SKUs assigned to the Service Group being deleted will
          have no assigned Service Group after the deletion

SKU
^^^
A Stock Keeping Unit (SKU) is the unit by which stock is managed.

Two manufactured items of the same SKU are identical in every way (with the
possible exception of a label containing a unique serial number)

**Basic Usage**: ``cloudcix.api.SCM.sku.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku.list``
        - This method returns a list of SKU records for a particular
          Member
    - ``cloudcix.api.SCM.sku.create``
        - This method allows the User to create an SKU belonging to its
          Member
    - ``cloudcix.api.SCM.sku.read``
        - This method allows the User to read an SKU for a particular
          Member
    - ``cloudcix.api.SCM.sku.update``
        - This method allows the User to update an SKU belonging to its
          Member
    - ``cloudcix.api.SCM.sku.delete``
        - This method allows the User to delete an SKU belonging to its
          Member
        - An SKU cannot be deleted under the following conditions
            - The SKU is a property of a Manufactured Item
            - The SKU has been used in a transaction

SKU Category
^^^^^^^^^^^^
An SKU Category is a classification for an SKU

**Basic Usage**: ``cloudcix.api.SCM.sku_category.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku_category.list``
        - This method returns a list of Categories
        - Only addresses acting as Service Centres can read other Member's
          categories if they have the User's Address as a Service Centre
    - ``cloudcix.api.SCM.sku_category.create``
        - This method allows Users to create a Category for his Member
        - Each SKU belongs to a Category
    - ``cloudcix.api.SCM.sku_category.read``
        - This method will read an SKU Category for the Member of the User who
          made the request
    - ``cloudcix.api.SCM.sku_category.update``
        - This method allows Users to update a Category for their Member
        - Category names must be unique for Categories with no Master Category
          or within the same Master Category
    - ``cloudcix.api.SCM.sku_category.delete``
        - This method will delete a Category for his member
        - All associations with Return Questions will be deleted

SKU Category Return Question
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This service allows the User to associate Return Questions with SKU Categories

**Basic Usage**: ``cloudcix.api.SCM.sku_category_return_question.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku_category_return_question.create``
        - Allows the User to create a relationship between an SKU Category and
          a Return Question
    - ``cloudcix.api.SCM.sku_category_return_question.delete``
        - Allows the User to delete a relationship between an SKU Category and
          a Return Question


SKU Stock
^^^^^^^^^
This service allows the User to see SKU Stock values

**Basic Usage**: ``cloudcix.api.SCM.sku_stock.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku_stock.list``
        - This method allows the User to get the full Stock of the SKU in the
          different Addresses it is in.
        - If the Stock belongs to a different Address than the requesting User,
          a Link between them must exist.
        - If the User is acting as Local and the SKU belongs to their Member,
          only the Stock at the User's Address will be shown
    - ``cloudcix.api.SCM.sku_stock.read``
        - This method allows the User to read the Stock of an SKU in a given
          Address
        - If the SKU belongs to an Address in a different Member than the
          requesting User, a link between the Members must exist

SKU Stock Adjustment
^^^^^^^^^^^^^^^^^^^^
This service allows Users to manage their SKU Stock by making adjustments to it

A SKU Stock Adjustment Transaction allows Users to adjust the SKU inventory by
increasing or decreasing the amount of items or volume in stock

**Basic Usage**: ``cloudcix.api.SCM.sku_stock_adjustment.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku_stock_adjustment.list``
        - This method allows the User to get a list of SKU Stock Adjustment
          Transactions
    - ``cloudcix.api.SCM.sku_stock_adjustment.create``
        - This method allows the User to create a new SKU Stock Adjustment
          Transaction
    - ``cloudcix.api.SCM.sku_stock_adjustment.read``
        - This method allows the User to get an SKU Stock Adjustment
          Transaction and its details
    - ``cloudcix.api.SCM.sku_stock_adjustment.update``
        - This method allows the User to update some details of an SKU Stock
          Adjustment Transaction

SKU Value
^^^^^^^^^
This service allows Users to manage the values for an SKU on each class

**Basic Usage**: ``cloudcix.api.SCM.sku_value.<method>``

Available Methods
    - ``cloudcix.api.SCM.sku_value.list``
        - This method allows the User to get all the values for an SKU in all
          their Addresses.
        - If the User is acting Local, it will only return the values in their
          own Address
    - ``cloudcix.api.SCM.sku_value.create``
        - This method allows the User to create the values for an SKU in a
          given Address
        - If no Address is specified, the Address of the requesting User will
          be used
        - If the given Address is not the User's Address, then the following conditions must be met in order to continue:
            - The given Address belongs to the User's Member
            - The User is acting Global
    - ``cloudcix.api.SCM.sku_value.read``
        - This method allows the User to read the values for an SKU in a given
          Address.
        - If the specified Address is not the requesting User's Address, the following conditions must be met:
            - The specified Address belongs to the requesting User's Member
            - The User is acting Global
    - ``cloudcix.api.SCM.sku_value.update``
        - This method allows the User to update the values for an SKU in a
          given Address
        - If the User has permission to Read the SKU, the User can also
          Update it

Validate Purchase Order
^^^^^^^^^^^^^^^^^^^^^^^
This service allows Users to validate data before submitting it to modify a Purchase Order

**Basic Usage**: ``cloudcix.api.SCM.validate_purchase_order.<method>``

Available Methods
    - ``cloudcix.api.SCM.validate_purchase_order.update``
        - This method allows the User to validate data for updating a Purchase Order

Validate Sale Order
^^^^^^^^^^^^^^^^^^^
This service allows Users to validate data before submitting it to modify a Sales Order

**Basic Usage**: ``cloudcix.api.SCM.validate_sales_order.<method>``

Available Methods
    - ``cloudcix.api.SCM.validate_sales_order.update``
        - This method allows the User to validate data for updating a Sales Order
